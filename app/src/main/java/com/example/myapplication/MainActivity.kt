package com.example.presentation

import android.widget.Toast
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.example.myapplication.R
import kotlin.random.Random
import androidx.compose.foundation.border
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.ArrowDropDown


data class Purchase(val name: String, val price: Int, val iconRes: Int, val bgColor: Color)

@Composable
fun PurchaseList() {
    val context = LocalContext.current
    val colors = listOf(
        Color(0xFF4A90E2),
        Color(0xFFFF3B30),
        Color(0xFFFFC107),
        Color(0xFF34C759)
    )
    val categories = listOf(
        Pair("Buy Camera", R.drawable.camera),
        Pair("Buy Television", R.drawable.tv)
    )
    val purchases = remember {
        List(6) {
            val category = categories.random()
            Purchase(
                name = category.first,
                price = Random.nextInt(100, 2000),
                iconRes = category.second,
                bgColor = colors.random()
            )
        }
    }

    val total = purchases.sumOf { it.price }
    var otpCode by remember { mutableStateOf("") }
    var isOtpGenerated by remember { mutableStateOf(false) }
    var isPayEnabled by remember { mutableStateOf(false) }

    var expanded by remember { mutableStateOf(false) }
    var selectedCard by remember { mutableStateOf("4411 0000 1234") }
    val cardOptions = listOf("4411 0000 1234", "5522 3333 4444", "1234 5678 9012")

    Column(
        modifier = Modifier.fillMaxSize().padding(16.dp)
    ) {
        Text("Credit card", fontSize = 24.sp, fontWeight = FontWeight.Bold)

        Box(
            modifier = Modifier
                .fillMaxWidth()
                .background(Color.White, shape = RoundedCornerShape(16.dp))
                .border(1.dp, Color.White, shape = RoundedCornerShape(16.dp))
                .padding(16.dp)
        ) {
            Column {
                LazyColumn(modifier = Modifier.fillMaxWidth()) {
                    items(purchases) { purchase ->
                        Column(
                            modifier = Modifier
                                .fillMaxWidth()
                                .padding(vertical = 8.dp)
                        ) {
                            Row(
                                modifier = Modifier.fillMaxWidth().padding(bottom = 8.dp).border(0.dp, Color.Transparent),
                                verticalAlignment = Alignment.CenterVertically
                            ) {
                                Box(
                                    modifier = Modifier.size(40.dp).background(purchase.bgColor, shape = RoundedCornerShape(10.dp)),
                                    contentAlignment = Alignment.Center
                                ) {
                                    Image(
                                        painter = painterResource(id = purchase.iconRes),
                                        contentDescription = purchase.name,
                                        modifier = Modifier.size(24.dp)
                                    )
                                }
                                Column(modifier = Modifier.weight(1f).padding(start = 12.dp)) {
                                    Text(purchase.name, fontSize = 16.sp, fontWeight = FontWeight.Bold)
                                    Text("02/11/2018", fontSize = 12.sp, color = Color.Gray)
                                }
                                Text(
                                    "- $${purchase.price}",
                                    fontSize = 18.sp,
                                    fontWeight = FontWeight.Bold,
                                    color = Color.Red,
                                    modifier = Modifier.padding(end = 8.dp)
                                )
                            }
                            Divider(color = Color.LightGray, thickness = 1.dp)
                        }
                    }
                }

                Spacer(modifier = Modifier.height(20.dp))

                Text(
                    "TOTAL: -$$total",
                    fontSize = 22.sp,
                    fontWeight = FontWeight.Bold,
                    color = Color.Red,
                    modifier = Modifier.align(Alignment.End)
                )
            }
        }

        Spacer(modifier = Modifier.height(32.dp))

        OutlinedTextField(
            value = selectedCard,
            onValueChange = {},
            modifier = Modifier.fillMaxWidth(),
            shape = RoundedCornerShape(8.dp),
            readOnly = true,
            trailingIcon = {
                Icon(Icons.Filled.ArrowDropDown, contentDescription = "Dropdown")
            },
            colors = OutlinedTextFieldDefaults.colors(
                focusedBorderColor = Color.Gray,
                unfocusedBorderColor = Color.Gray,
                focusedContainerColor = Color.White,
                unfocusedContainerColor = Color.White
            )
        )

        DropdownMenu(expanded = expanded, onDismissRequest = { expanded = false }) {
            cardOptions.forEach { card ->
                DropdownMenuItem(
                    text = { Text(card) },
                    onClick = {
                        selectedCard = card
                        expanded = false
                    }
                )
            }
        }

        Spacer(modifier = Modifier.height(24.dp))

        Text("Get OTP to verify transaction", fontSize = 14.sp, color = Color.Gray)

        Row(modifier = Modifier.fillMaxWidth(), verticalAlignment = Alignment.CenterVertically) {
            TextField(
                value = otpCode,
                onValueChange = {},
                modifier = Modifier.weight(1f),
                enabled = false,
                shape = RoundedCornerShape(16.dp),
                colors = TextFieldDefaults.colors(
                    unfocusedContainerColor = Color.White,
                    focusedContainerColor = Color.White
                )
            )
            Spacer(modifier = Modifier.width(12.dp))
            Button(onClick = {
                otpCode = Random.nextInt(100000, 999999).toString()
                isOtpGenerated = true
                isPayEnabled = true
            }, enabled = !isOtpGenerated) {
                Text("Get OTP")
            }
        }

        Spacer(modifier = Modifier.height(40.dp))

        Button(
            onClick = {
                Toast.makeText(context, "Payment of $$total successful!", Toast.LENGTH_LONG).show()
                isPayEnabled = false
            },
            modifier = Modifier.fillMaxWidth(),
            enabled = isPayEnabled,
            colors = ButtonDefaults.buttonColors(containerColor = if (isPayEnabled) Color.Blue else Color.LightGray)
        ) {
            Text("Pay", color = Color.White)
        }
    }
}

